/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * IncorrectAuthority: 'Authority is not allowed to perform such action'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectAuthorityError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'IncorrectAuthority'
  constructor() {
    super('Authority is not allowed to perform such action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new IncorrectAuthorityError())
createErrorFromNameLookup.set(
  'IncorrectAuthority',
  () => new IncorrectAuthorityError()
)

/**
 * Initialized: 'Account already initialized'
 *
 * @category Errors
 * @category generated
 */
export class InitializedError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'Initialized'
  constructor() {
    super('Account already initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InitializedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InitializedError())
createErrorFromNameLookup.set('Initialized', () => new InitializedError())

/**
 * Uninitialized: 'Account is not initialized'
 *
 * @category Errors
 * @category generated
 */
export class UninitializedError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'Uninitialized'
  constructor() {
    super('Account is not initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UninitializedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new UninitializedError())
createErrorFromNameLookup.set('Uninitialized', () => new UninitializedError())

/**
 * MintMismatch: 'Mint Mismatch'
 *
 * @category Errors
 * @category generated
 */
export class MintMismatchError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'MintMismatch'
  constructor() {
    super('Mint Mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new MintMismatchError())
createErrorFromNameLookup.set('MintMismatch', () => new MintMismatchError())

/**
 * IncorrectSeeds: 'Incorrect seeds'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectSeedsError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'IncorrectSeeds'
  constructor() {
    super('Incorrect seeds')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectSeedsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new IncorrectSeedsError())
createErrorFromNameLookup.set('IncorrectSeeds', () => new IncorrectSeedsError())

/**
 * AccountTooLarge: 'Target account exceeds limit'
 *
 * @category Errors
 * @category generated
 */
export class AccountTooLargeError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'AccountTooLarge'
  constructor() {
    super('Target account exceeds limit')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountTooLargeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new AccountTooLargeError())
createErrorFromNameLookup.set(
  'AccountTooLarge',
  () => new AccountTooLargeError()
)

/**
 * InvalidRange: 'Invalid range'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRangeError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidRange'
  constructor() {
    super('Invalid range')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRangeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidRangeError())
createErrorFromNameLookup.set('InvalidRange', () => new InvalidRangeError())

/**
 * MathError: 'Math error'
 *
 * @category Errors
 * @category generated
 */
export class MathErrorError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'MathError'
  constructor() {
    super('Math error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MathErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new MathErrorError())
createErrorFromNameLookup.set('MathError', () => new MathErrorError())

/**
 * InsufficientBalance: 'Insufficient balance'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientBalanceError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InsufficientBalance'
  constructor() {
    super('Insufficient balance')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientBalanceError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InsufficientBalanceError())
createErrorFromNameLookup.set(
  'InsufficientBalance',
  () => new InsufficientBalanceError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
