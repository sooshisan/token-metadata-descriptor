/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Close
 * @category generated
 */
export const closeStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CloseInstructionArgs'
)
/**
 * Accounts required by the _close_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [**signer**] authority
 * @property [_writable_] destination
 * @property [_writable_] descriptor
 * @property [] mint
 * @property [] tokenMetadata
 * @property [] tokenMetadataProgram
 * @category Instructions
 * @category Close
 * @category generated
 */
export type CloseInstructionAccounts = {
  payer: web3.PublicKey
  authority: web3.PublicKey
  destination: web3.PublicKey
  descriptor: web3.PublicKey
  mint: web3.PublicKey
  tokenMetadata: web3.PublicKey
  tokenMetadataProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const closeInstructionDiscriminator = [
  98, 165, 201, 177, 108, 65, 206, 96,
]

/**
 * Creates a _Close_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Close
 * @category generated
 */
export function createCloseInstruction(
  accounts: CloseInstructionAccounts,
  programId = new web3.PublicKey('DesCwDwfrbxTDSjAm5Xjqh9Cij5Ucb46F6qH7cwieXB')
) {
  const [data] = closeStruct.serialize({
    instructionDiscriminator: closeInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.destination,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.descriptor,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
